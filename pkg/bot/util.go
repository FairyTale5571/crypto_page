package bot

import (
	"fmt"
	"strconv"

	"github.com/fairytale5571/crypto_page/pkg/models"
	"github.com/fairytale5571/crypto_page/pkg/storage"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (b *Bot) isAlreadyRegistered(field, data string) bool {
	var id string
	query := fmt.Sprintf("select id from users where %s = ?", field)
	_ = b.database.QueryRow(query, data).Scan(&id)
	return id != ""
}

func (b *Bot) TwitterValid(id string, username string) {
	n, _ := strconv.ParseInt(id, 10, 64)
	if b.isAlreadyRegistered("twitter", username) {
		b.TwitterNotValid(id)
		return
	}
	err := b.redis.Set(fmt.Sprintf("twitter_id:%d", n), username, storage.UserTwitter)
	if err != nil {
		b.logger.Errorf("error TwitterValid: %v", err)
		return
	}
	b.sendMessage(n, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Twitter –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
	b.verifyInstagram(n)
}

func (b *Bot) TwitterNotValid(id string) {
	n, _ := strconv.ParseInt(id, 10, 64)
	_ = b.sendMessage(n, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Twitter –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
	b.verifyTwitter(n)
}

func (b *Bot) getAllChats() map[string]string {
	rows, err := b.database.Query("SELECT name, username FROM chats")
	defer rows.Close() // nolint: not needed

	if err != nil {
		b.logger.Errorf("error getAllChats: %v", err)
		return nil
	}

	chats := make(map[string]string)
	for rows.Next() {
		var id string
		var name string
		if err := rows.Scan(&id, &name); err != nil {
			b.logger.Errorf("error getAllChats: %v", err)
			return nil
		}
		if name == "" {
			continue
		}
		chats[id] = name
	}

	return chats

}

func (b *Bot) startRegister(callback *tgbotapi.CallbackQuery) {
	b.deleteMessage(callback.Message.Chat.ID, callback.Message.MessageID)
	msg := b.photoConfigUrl(callback.From.ID, b.cfg.URL+"/assets/images/telegram.jpg", "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –ø–æ —Å—Å—ã–ª–∫–∞–º –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ \n\"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏\"")

	channels := b.getAllChats()
	keyboard := tgbotapi.NewInlineKeyboardMarkup()
	for k, v := range channels {
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL(k, "t.me/"+v),
		))
	}
	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", "check_subscriptions"),
	))

	msg.ReplyMarkup = keyboard
	_, err := b.bot.Send(msg)
	if err != nil {
		b.logger.Errorf("Error send message: %v", err)
	}
}

func (b *Bot) createPoll(poll *tgbotapi.SendPollConfig) error {
	_msg, err := b.bot.Send(poll)
	if err != nil {
		b.logger.Errorf("error createPoll: %v", err)
		return err
	}
	_, err = b.database.Exec("INSERT INTO polls_result (id, telegram_id, poll, insert_time) VALUES (?,?,?, NOW())", _msg.Poll.ID, _msg.Chat.ID, _msg.Poll.Question)
	if err != nil {
		b.logger.Errorf("error createPoll: %v", err)
		return err
	}
	return nil
}

func (b *Bot) photoConfigUrl(id int64, url, caption string) *tgbotapi.PhotoConfig {
	return &tgbotapi.PhotoConfig{
		Caption: caption,
		BaseFile: tgbotapi.BaseFile{
			BaseChat: tgbotapi.BaseChat{
				ChatID: id,
			},

			File: tgbotapi.FileURL(url),
		},
	}
}

func (b *Bot) isInDatabase(userId int64) bool {
	var id string
	err := b.database.QueryRow("select id from users where telegram_id = ?", userId).Scan(&id)
	if err != nil {
		b.logger.Errorf("error isInDatabase: %v", err)
		return false
	}
	return id != ""
}

func (b *Bot) insertNewUser(userId int64, username, firstName, lastName string) {
	stmt, err := b.database.Prepare("INSERT INTO users (telegram_id, user_name, user_first_name, user_last_name, status, registered_at) VALUES (?,?,?,?, 'member', now())")
	if err != nil {
		b.logger.Errorf("error insertNewUser: %v", err)
		return
	}
	defer stmt.Close()
	_, err = stmt.Exec(userId, username, firstName, lastName)
	if err != nil {
		b.logger.Errorf("error insertNewUser: %v", err)
		return
	}
}

func (b *Bot) updateUserNames(userId int64, username, firstName, lastName, referral string) {
	var err error
	if referral != "" {
		_, err = b.database.Exec("UPDATE users SET user_name = ?, user_first_name = ?, user_last_name = ?, referred_by = ? WHERE telegram_id = ?", username, firstName, lastName, referral, userId)
	} else {
		_, err = b.database.Exec("UPDATE users SET user_name = ?, user_first_name = ?, user_last_name = ? WHERE telegram_id = ?", username, firstName, lastName, userId)
	}

	if err != nil {
		b.logger.Errorf("error updateUserNames: %v", err)
	}
}

func (b *Bot) validInstagram(id string) (bool, string) {
	b.logger.Infof("%s is subscriber on instagram", id)
	return checkString(id), ""
}

func (b *Bot) getTwitterUrl(id int64) string {
	consumer := models.TwitterConsumer
	tokenUrl := fmt.Sprintf("%s/auth/twitter/callback", b.cfg.URL)
	token, requestUrl, err := consumer.GetRequestTokenAndUrl(tokenUrl)
	if err != nil {
		b.logger.Errorf("error getTwitterTokens: %v", err)
		return ""
	}
	models.Tokens[token.Token] = token

	_ = b.redis.Set(fmt.Sprintf("twitter:ts_%s_id", token.Token), fmt.Sprintf("%d", id), storage.UserTwitter)
	return requestUrl
}

func (b *Bot) sendMessage(id int64, s string) tgbotapi.Message {
	msg := tgbotapi.NewMessage(id, s)
	send, _ := b.bot.Send(msg)
	return send
}

func (b *Bot) deleteMessage(chatID int64, messageID int) {
	msg := tgbotapi.NewDeleteMessage(chatID, messageID)
	_, _ = b.bot.Send(msg)
}

func (b *Bot) getIdFromPoll(id string) int64 {
	var telegramId int64
	err := b.database.QueryRow("select telegram_id from polls_result where id = ?", id).Scan(&telegramId)
	if err != nil {
		b.logger.Errorf("error getIdFromPoll: %v", err)
		return 0
	}
	return telegramId
}

func (b *Bot) SendMessage(id int64, s string) tgbotapi.Message {
	return b.sendMessage(id, s)
}

func (b *Bot) lastVerify(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–•–æ—Ç–∏—Ç–µ –ª–∏ –±—ã—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω—ã–º –≤ –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–≤–∏—Ç–∏—è –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ Crypto.Page?")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞", "want_yes"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –ù–µ—Ç", "want_no"),
		),
	)
	_, _ = b.bot.Send(msg)
}

func (b *Bot) wantYes(callback *tgbotapi.CallbackQuery) {
	waitWhyYouCanHelp[callback.From.ID] = struct{}{}
	msg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, "–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?\n–û–ø–∏—à–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
	_, _ = b.bot.Send(msg)
}

func (b *Bot) finishRegistration(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º üéâ \n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –∏ —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–∏ —à–∞–Ω—Å—ã!\n–ñ–º–∏üëá–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞.")
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(buttonsAbout),
			tgbotapi.NewKeyboardButton(buttonsReferral),
		),
	)
	_, _ = b.bot.Send(msg)
}

func (b *Bot) about(message *tgbotapi.Message) {
	msg := b.photoConfigUrl(message.Chat.ID, b.cfg.URL+"/assets/images/crypto_page.jpg", "Crypto.Page ‚Äî —ç—Ç–æ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è cross-chain —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å , –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Binance Smart Chain, Ethereum, Polygon, Tron, Solana.\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–ª–∞—Ç—è—Ç –∫–æ–º–∏—Å—Å–∏—é, —Ä–∞–∑–º–µ—Ä –∫–æ—Ç–æ—Ä–æ–π –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞, –≤ –æ–±–º–µ–Ω –Ω–∞ —Ç–æ–∫–µ–Ω—ã PAGE –∑–∞ –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Crypto.Page (–ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –æ—Ü–µ–Ω–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–º–±–∞—Å–∞–¥–æ—Ä–∞).\n\n"+
		"–í–µ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –∏ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –≤–∏–¥–µ –Ω–µ–≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (NFT), –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Å –∞—É–∫—Ü–∏–æ–Ω–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏–ª–∏ —Å–∂–∏–≥–∞—Ç—å –ø—Ä–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ PAGE. "+
		"–°–æ–∑–¥–∞—Ç–µ–ª—å NFT –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Å –∫–∞–∂–¥–æ–π –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏ —É—Å–∏–ª–∏–π –≤ —Ç–æ–∫–µ–Ω–∞—Ö PAGE, –∞ —Ç–∞–∫–∂–µ —Å –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞. "+
		"–ò–∑-–∑–∞ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å (—Å–∂–µ—á—å) –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("Web", "https://crypto.page"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "https://app.crypto.page"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¢–≤–∏—Ç—Ç–µ—Ä", "https://twitter.com/cryptopage_web3"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–ò–Ω—Å—Ç–∞–≥—Ä–∞–º", "https://instagram.com/cryptopage_web3"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–ê–Ω–≥–ª–æ—è–∑—ã—á–Ω–æ–µ –∫–æ–º—å—é–Ω–∏—Ç–∏", "https://t.me/cryptopage_web3"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–†—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–µ –∫–æ–º—å—é–Ω–∏—Ç–∏", "https://t.me/cryptopage_web_3"),
		),
	)

	_, _ = b.bot.Send(msg)
}

func (b *Bot) countReferrals(id int64) uint {
	var count uint
	err := b.database.QueryRow("select count(*) from users where referred_by = ? and telegram_id != ? "+
		"and users.instagram is not null "+
		"and users.twitter is not null "+
		"and users.status = 'member'", id, id).Scan(&count)
	if err != nil {
		b.logger.Errorf("error isInDatabase: %v", err)
		return count
	}
	return count
}

func (b *Bot) referral(message *tgbotapi.Message) {

	var involvedText string
	referrals := b.countReferrals(message.Chat.ID)
	if referrals == 0 {
		involvedText = "–Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ ‚ùå - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞"
	} else {
		involvedText = "–≤—ã —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ"
	}
	msg := b.photoConfigUrl(message.Chat.ID, b.cfg.URL+"/assets/images/about.jpg", fmt.Sprintf(
		"–ë—É–¥—å –≤–æ–≤–ª–µ—á—ë–Ω –≤ –ø—Ä–æ–µ–∫—Ç Crypto.Page!\n\n"+
			"‚ö°Ô∏è–ò–º–µ–π –ø–ª–∞–Ω –ë, –ø—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏–∑ –∑–∞ –µ–≥–æ –ø–æ–±–µ–¥—É.\n\n"+
			"–í–∞—à —Å—Ç–∞—Ç—É—Å: "+involvedText+"\n"+
			"–í–∞—à–∏ –¥—Ä—É–∑—å—è: %d üë•\n"+
			"–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ —É—Å–ª–æ–≤–∏—è –∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ–≥–æ –¥—Ä—É–≥–∞. \n"+
			"–í–∞—à–∞ –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π üîó:\n"+
			"https://t.me/crypto_page_bot?start=%d", referrals, message.Chat.ID))
	_, _ = b.bot.Send(msg)
}

func (b *Bot) getUserStatus(id int64) string {
	var status string
	err := b.database.QueryRow("select status from users where telegram_id = ?", id).Scan(&status)
	if err != nil {
		b.logger.Errorf("error getUserStatus: %v", err)
		return ""
	}
	return status
}

func checkString(str string) bool {
	allowedCharacters := []string{
		"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",
		"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
		"0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
		".", "_", "-",
	}
	for _, v := range str {
		for _, v2 := range allowedCharacters {
			if string(v) == v2 {
				return true
			}
		}
	}
	return false
}
